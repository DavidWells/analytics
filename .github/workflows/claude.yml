name: Claude Code

on:
  # PR related events
  pull_request_target:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  # Issue related events (added)
  issues:
    types: [opened, assigned]
  issue_comment:
    types: [created]

# Concurrency control (one run per Issue/PR)
concurrency:
  group: claude-${{ github.repository }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: false

jobs:
  setup:
    # Security-focused conditional execution (full support for Issues and PRs)
    if: |
      (
        github.event_name == 'pull_request_target' &&
        (
          github.event.pull_request.head.repo.full_name == github.repository ||
          contains(fromJSON('["COLLABORATOR", "MEMBER", "OWNER"]'), github.event.pull_request.author_association)
        ) &&
        contains(github.event.pull_request.body, '@claude')
      ) ||
      (
        github.event_name == 'issue_comment' &&
        (
          github.event.sender.login == github.repository_owner ||
          contains(fromJSON('["COLLABORATOR", "MEMBER", "OWNER"]'), github.event.comment.author_association)
        ) &&
        contains(github.event.comment.body, '@claude')
      ) ||
      (
        github.event_name == 'issues' &&
        (
          github.event.sender.login == github.repository_owner ||
          contains(fromJSON('["COLLABORATOR", "MEMBER", "OWNER"]'), github.event.issue.author_association)
        ) &&
        (
          contains(github.event.issue.body, '@claude') ||
          contains(github.event.issue.title, '@claude')
        )
      ) ||
      (
        github.event_name == 'pull_request_review_comment' &&
        (
          github.event.sender.login == github.repository_owner ||
          contains(fromJSON('["COLLABORATOR", "MEMBER", "OWNER"]'), github.event.comment.author_association)
        ) &&
        contains(github.event.comment.body, '@claude')
      ) ||
      (
        github.event_name == 'pull_request_review' &&
        (
          github.event.sender.login == github.repository_owner ||
          contains(fromJSON('["COLLABORATOR", "MEMBER", "OWNER"]'), github.event.review.author_association)
        ) &&
        contains(github.event.review.body, '@claude')
      )
    
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      # üìÅ Content management (highest permissions)
      contents: write
      pull-requests: write
      issues: write
      discussions: write
      # üîß Development & CI/CD management
      actions: write
      checks: write
      statuses: write
      pages: write
      deployments: write
      # üì¶ Package & security management
      packages: write
      security-events: write
      # üéØ Project management
      repository-projects: write
      # üÜî Authentication & token management
      id-token: write
    # Outputs
    outputs:
      should-continue: ${{ steps.should-continue.outputs.should-continue }}
      issue-number: ${{ steps.context-info.outputs.issue-number }}
      pr-number: ${{ steps.context-info.outputs.pr-number }}
      head-ref: ${{ steps.context-info.outputs.head-ref }}
      base-ref: ${{ steps.context-info.outputs.base-ref }}
      head-sha: ${{ steps.context-info.outputs.head-sha }}
      is-pr: ${{ steps.context-info.outputs.is-pr }}
      trigger-text: ${{ steps.context-info.outputs.trigger-text }}
      has-linked-pr: ${{ steps.context-info.outputs.has-linked-pr }}
      status-comment-id: ${{ steps.find_comment.outputs.comment-id || steps.create_comment.outputs.comment-id }}
    ######################
    # Setup steps
    ######################
    steps:
      - name: Get Context Information
        id: context-info
        uses: actions/github-script@v7
        with:
          script: |
            let issueNumber, prNumber, headRef, baseRef, headSha
            let triggerText = ''
            let hasLinkedPR = false
            let isPR = false
            
            if (context.eventName === 'pull_request_target') {
              // When a PR is created or updated
              isPR = true
              issueNumber = context.payload.pull_request.number
              prNumber = context.payload.pull_request.number
              headRef = context.payload.pull_request.head.ref
              baseRef = context.payload.pull_request.base.ref
              headSha = context.payload.pull_request.head.sha
              triggerText = context.payload.pull_request.body
              
              console.log(`PR #${prNumber}: ${baseRef} <- ${headRef} (${headSha})`)
              
            } else if (context.eventName === 'issues') {
              // When an Issue is created or assigned
              isPR = false
              issueNumber = context.payload.issue.number
              triggerText = `${context.payload.issue.title} ${context.payload.issue.body}`
              
              console.log(`Issue #${issueNumber} created`)
              
            } else if (context.eventName === 'issue_comment') {
              // Issue/PR comment
              issueNumber = context.payload.issue.number
              triggerText = context.payload.comment.body
              
              if (context.payload.issue.pull_request) {
                // Comment on a PR
                isPR = true
                try {
                  const pr = await github.rest.pulls.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: issueNumber
                  })
                  prNumber = issueNumber
                  headRef = pr.data.head.ref
                  baseRef = pr.data.base.ref
                  headSha = pr.data.head.sha
                  
                  console.log(`PR Comment #${prNumber}: ${baseRef} <- ${headRef}`)
                } catch (error) {
                  console.error('Error fetching PR info:', error)
                  // In case of error, treat as a regular Issue
                  isPR = false
                }
              } else {
                // Regular Issue comment - check for existing linked PRs
                isPR = false
                
                try {
                  // Get timeline events to find linked pull requests
                  const { data: timeline } = await github.rest.issues.listEventsForTimeline({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    per_page: 100,
                    headers: {
                      accept: 'application/vnd.github.mockingbird-preview+json'
                    }
                  })

                  console.log(`Timeline: ${JSON.stringify(timeline, null, 2)}`)

                  const linkedPRs = timeline
                    // filter out event.event is not cross-referenced
                    .filter(event => event.event === 'cross-referenced')
                    // filter out event.source?.issue?.pull_request is null
                    .filter(event => event.source?.issue?.pull_request?.url)
                    // return url and pr name, and the issue number and the body and the actor
                    .map(event => ({
                      issueNumber: event.source?.issue?.number,
                      actor: event.actor?.login,
                      url: event.source?.issue?.pull_request?.url,
                      title: event.source?.issue?.title,
                      body: event.source?.issue?.body,
                    }))

                  hasLinkedPR = linkedPRs.length > 0
                  console.log(`Linked PRs:`, linkedPRs)
                  console.log(`Issue Comment #${issueNumber}, already has linked PR: ${hasLinkedPR}`)
                  
                } catch (error) {
                  console.error('Error checking for linked PRs:', error)
                }
              }
              
            } else if (context.eventName === 'pull_request_review_comment' || context.eventName === 'pull_request_review') {
              // PR review related
              isPR = true
              issueNumber = context.payload.pull_request.number
              prNumber = context.payload.pull_request.number
              headRef = context.payload.pull_request.head.ref
              baseRef = context.payload.pull_request.base.ref
              headSha = context.payload.pull_request.head.sha
              
              if (context.eventName === 'pull_request_review_comment') {
                triggerText = context.payload.comment.body
              } else {
                triggerText = context.payload.review.body
              }
              
              console.log(`PR Review #${prNumber}: ${baseRef} <- ${headRef}`)
            }
            
            // Set outputs
            core.setOutput('issue-number', issueNumber)
            core.setOutput('pr-number', prNumber || '')
            core.setOutput('head-ref', headRef || '')
            core.setOutput('base-ref', baseRef || '')
            core.setOutput('head-sha', headSha || '')
            core.setOutput('is-pr', isPR)
            core.setOutput('trigger-text', triggerText)
            core.setOutput('has-linked-pr', hasLinkedPR)
            
            console.log(`Final Context:`)
            console.log(`Event: ${context.eventName}`)
            console.log(`Issue #${issueNumber}`)
            console.log(`isPR: ${isPR}`)
            console.log(`Trigger Text: ${triggerText}`)
            console.log(`Already has linked PR: ${hasLinkedPR}`)

      - name: Validate Environment
        run: |
          echo "üîç Runtime Environment Information"
          echo "=================================="
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Issue Number: ${{ steps.context-info.outputs.issue-number }}"
          echo "Is PR: ${{ steps.context-info.outputs.is-pr }}"
          echo "PR Number: ${{ steps.context-info.outputs.pr-number }}"
          echo "Head Ref: ${{ steps.context-info.outputs.head-ref }}"
          echo "Base Ref: ${{ steps.context-info.outputs.base-ref }}"
          echo "Head SHA: ${{ steps.context-info.outputs.head-sha }}"
          echo "Has Linked PR: ${{ steps.context-info.outputs.has-linked-pr }}"
          echo "=================================="
          
          # Check for secrets
          if [ -z "${{ secrets.CLAUDE_CREDS_API_KEY }}" ]; then
            echo "::error::CLAUDE_CREDS_API_KEY is not set"
            exit 1
          fi

          if [ -z "${{ secrets.CLAUDE_CREDS_API }}" ]; then
            echo "::error::CLAUDE_CREDS_API is not set"
            exit 1
          fi
          
          echo "‚úÖ Environment validation complete"

      - name: Exit early if Issue already has linked PR
        id: should-continue
        run: |
          IS_PR="${{ steps.context-info.outputs.is-pr }}"
          HAS_LINKED_PR="${{ steps.context-info.outputs.has-linked-pr }}"
          
          if [[ "$IS_PR" == "false" && "$HAS_LINKED_PR" == "true" ]]; then
            echo "Issue already has linked PR. Will skip remaining steps."
            echo "should-continue=false" >> $GITHUB_OUTPUT
          else
            echo "No linked PRs found or this is a PR. Continuing."
            echo "should-continue=true" >> $GITHUB_OUTPUT
          fi

      - name: Debug issue number
        run: echo "The issue number is ${{ github.event.number }}"

      # Only add comment if it doesn't exist
      - name: Find existing status comment
        if: steps.should-continue.outputs.should-continue == 'true'
        uses: peter-evans/find-comment@v3
        id: find_comment # We'll check the output of this step
        with:
          issue-number: ${{ steps.context-info.outputs.issue-number }}
          comment-author: 'github-actions[bot]'
          body-includes: '<!-- claude-run-status -->'

      - name: Create initial "in-progress" comment if it doesn't exist
        # This step ONLY runs if the 'find-comment' step found nothing
        if: steps.should-continue.outputs.should-continue == 'true' && steps.find_comment.outputs.comment-id == ''
        uses: peter-evans/create-or-update-comment@v4
        id: create_comment
        with:
          issue-number: ${{ steps.context-info.outputs.issue-number }}
          body: |
            Claude Code is running... ‚è≥
            <!-- claude-run-status -->
  #########################################################
  # Claude Code
  #########################################################
  claude:
    needs: setup
    # Security-focused conditional execution (full support for Issues and PRs)
    if: needs.setup.outputs.should-continue == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      # üìÅ Content management (highest permissions)
      contents: write
      pull-requests: write
      issues: write
      discussions: write
      
      # üîß Development & CI/CD management
      actions: write
      checks: write
      statuses: write
      pages: write
      deployments: write
      
      # üì¶ Package & security management
      packages: write
      security-events: write
      
      # üéØ Project management
      repository-projects: write
      
      # üÜî Authentication & token management
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Checkout the feature branch for PRs, or the default branch for Issues
          ref: ${{ needs.setup.outputs.head-sha || github.ref }}
          fetch-depth: ${{ needs.setup.outputs.is-pr == 'true' && 0 || 1 }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate Environment
        run: |
          echo "üîç Runtime Environment Information"
          echo "=================================="
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Issue Number: ${{ needs.setup.outputs.issue-number }}"
          echo "Is PR: ${{ needs.setup.outputs.is-pr }}"
          echo "PR Number: ${{ needs.setup.outputs.pr-number }}"
          echo "Head Ref: ${{ needs.setup.outputs.head-ref }}"
          echo "Base Ref: ${{ needs.setup.outputs.base-ref }}"
          echo "Head SHA: ${{ needs.setup.outputs.head-sha }}"
          echo "Has Linked PR: ${{ needs.setup.outputs.has-linked-pr }}"
          echo "=================================="
      
      - name: Fetch Base Branch (PR only)
        if: needs.setup.outputs.is-pr == 'true' && needs.setup.outputs.base-ref
        run: |
          echo "üì• Fetching base branch: ${{ needs.setup.outputs.base-ref }}"
          git fetch origin ${{ needs.setup.outputs.base-ref }}:${{ needs.setup.outputs.base-ref }}
          
          echo "üìã Changed files:"
          git diff --name-only origin/${{ needs.setup.outputs.base-ref }}..HEAD || echo "Failed to get diff"
          
          echo "üìä Change statistics:"
          git diff --stat origin/${{ needs.setup.outputs.base-ref }}..HEAD || echo "Failed to get stats"

      - name: Get Project Information
        id: project-info
        run: |
          echo "üìÅ Collecting project information"
          
          # Determine project type
          project_type="unknown"
          framework=""
          
          if [ -f "package.json" ]; then
            project_type="node"
            echo "üì¶ Node.js project detected"
            
            # Detect framework
            if grep -q "next" package.json; then
              framework="Next.js"
            elif grep -q "react" package.json; then
              framework="React"
            elif grep -q "vue" package.json; then
              framework="Vue.js"
            elif grep -q "angular" package.json; then
              framework="Angular"
            elif grep -q "express" package.json; then
              framework="Express"
            fi
          elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
            project_type="python"
            framework="Python"
            echo "üêç Python project detected"
          elif [ -f "Cargo.toml" ]; then
            project_type="rust"
            framework="Rust"
            echo "ü¶Ä Rust project detected"
          elif [ -f "go.mod" ]; then
            project_type="go"
            framework="Go"
            echo "üêπ Go project detected"
          elif [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
            project_type="java"
            framework="Java"
            echo "‚òï Java project detected"
          fi
          
          echo "project-type=$project_type" >> $GITHUB_OUTPUT
          echo "framework=$framework" >> $GITHUB_OUTPUT
          
          # Estimate number of files
          total_files=$(find . -type f \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.py" -o -name "*.rs" -o -name "*.go" -o -name "*.java" \) | wc -l)
          echo "total-files=$total_files" >> $GITHUB_OUTPUT
          
          echo "üìä Project summary: $framework ($total_files files)"

      - name: Setup Env
        id: setup-env
        uses: DavidWells/actions/get-claude-tokens@master
        with:
          api-key: ${{ secrets.CLAUDE_CREDS_API_KEY }}
          api-endpoint: ${{ secrets.CLAUDE_CREDS_API }}

      # - name: Run Claude PR Action
      #   uses: davidwells/claude-code-action@main
      #   with:
      #     use_oauth: true
      #     claude_access_token: ${{ steps.setup-env.outputs.access-token }}
      #     claude_refresh_token: ${{ steps.setup-env.outputs.refresh-token }}
      #     claude_expires_at: ${{ steps.setup-env.outputs.expires-at }}
      #     model: ${{ steps.setup-env.outputs.model || 'claude-sonnet-4-20250514' }}
      #     allowed_tools: ${{ steps.setup-env.outputs.allowed_tools || 'Bash,Edit,Read,Write,Glob,Grep,LS,MultiEdit,NotebookRead,NotebookEdit' }}
      #     timeout_minutes: "60"
          
      - name: Run Claude Code
        id: claude
        uses: davidwells/claude-code-action@main
        timeout-minutes: 10
        continue-on-error: true
        with:
          use_oauth: true
          claude_access_token: ${{ steps.setup-env.outputs.access-token }}
          claude_refresh_token: ${{ steps.setup-env.outputs.refresh-token }}
          claude_expires_at: ${{ steps.setup-env.outputs.expires-at }}
          model: ${{ steps.setup-env.outputs.model || 'claude-sonnet-4-20250514' }}
          # claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          # claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          # claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          # GITHUB ACTIONS (Maximum Freedom):
          allowed_tools: |
            Edit,View,Replace,Write,Create,
            BatchTool,GlobTool,GrepTool,NotebookEditCell,
            Bash(git:*),Bash(npm:*),Bash(yarn:*),Bash(python:*),
            Bash(docker:*),Bash(make:*),Bash(cargo:*),Bash(go:*),
            Bash(ls:*),Bash(cat:*),Bash(echo:*),Bash(curl:*),
            mcp__*
          disallowed_tools: |
            Bash(sudo:*),
            Bash(rm -rf /)
        env:
          # Pass context information to Claude Code
          GITHUB_CONTEXT_TYPE: ${{ needs.setup.outputs.is-pr == 'true' && 'PR' || 'ISSUE' }}
          ISSUE_NUMBER: ${{ needs.setup.outputs.issue-number }}
          PR_NUMBER: ${{ needs.setup.outputs.pr-number }}
          BASE_BRANCH: ${{ needs.setup.outputs.base-ref }}
          HEAD_BRANCH: ${{ needs.setup.outputs.head-ref }}
          HEAD_SHA: ${{ needs.setup.outputs.head-sha }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          TRIGGER_TEXT: ${{ needs.setup.outputs.trigger-text }}
          PROJECT_TYPE: ${{ steps.project-info.outputs.project-type }}
          PROJECT_FRAMEWORK: ${{ steps.project-info.outputs.framework }}
          TOTAL_FILES: ${{ steps.project-info.outputs.total-files }}
          GITHUB_ACTOR: ${{ github.actor }}
          REPOSITORY_NAME: ${{ github.repository }}
          
          # üîë Enhanced permission information
          CLAUDE_PERMISSIONS_LEVEL: "ENHANCED"
          REPO_ADMIN_MODE: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          # üìä Repository information
          REPOSITORY_OWNER: ${{ github.repository_owner }}
          REPOSITORY_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          REPOSITORY_PRIVATE: ${{ github.event.repository.private }}
          REPOSITORY_FORK: ${{ github.event.repository.fork }}
          
          # üéØ Execution context
          WORKFLOW_RUN_ID: ${{ github.run_id }}
          WORKFLOW_RUN_NUMBER: ${{ github.run_number }}
          COMMIT_SHA: ${{ github.sha }}
          REF_NAME: ${{ github.ref_name }}
          
          # üîß Available feature flags
          CAN_CREATE_RELEASES: "true"
          CAN_MANAGE_LABELS: "true" 
          CAN_MANAGE_MILESTONES: "true"
          CAN_MANAGE_PROJECTS: "true"
          CAN_MANAGE_WIKI: "true"
          CAN_MANAGE_PAGES: "true"
          CAN_MANAGE_DEPLOYMENTS: "true"
          CAN_MANAGE_SECURITY: "true"
          CAN_MANAGE_PACKAGES: "true"
          CAN_MANAGE_ACTIONS: "true"

      - name: Run Advanced Repository Management
        id: advanced-management
        if: steps.claude.outcome == 'success' && needs.setup.outputs.issue-number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = ${{ needs.setup.outputs.issue-number }};
            const isPR = '${{ needs.setup.outputs.is-pr }}' === 'true';
            const triggerText = (${{ toJSON(needs.setup.outputs.trigger-text) }} || '').toLowerCase();
            const framework = '${{ steps.project-info.outputs.framework }}';
            const hashSymbol = String.fromCharCode(35);
            
            console.log('üöÄ Starting advanced repository management...');
            
            const managementResults = {
              labels: [],
              milestones: [],
              projects: [],
              releases: [],
              security: [],
              wiki: [],
              pages: [],
              actions: []
            };
            
            try {
              // 1. üè∑Ô∏è Intelligent Label Management
              console.log('üìã Running automatic label management...');
              
              // Automatically create necessary labels
              const requiredLabels = [
                { name: 'claude-code', color: '7B68EE', description: 'Items created or modified by Claude Code' },
                { name: 'auto-generated', color: '00D084', description: 'Automatically generated content' },
                { name: 'security-fix', color: 'FF4444', description: 'Security-related fixes' },
                { name: 'performance', color: 'FFA500', description: 'Performance improvements' },
                { name: 'technical-debt', color: '8B4513', description: 'Resolving technical debt' },
                { name: 'documentation', color: '0366D6', description: 'Documentation related' },
                { name: 'ci-cd', color: '28A745', description: 'CI/CD improvements' }
              ];
              
              for (const label of requiredLabels) {
                try {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label.name,
                    color: label.color,
                    description: label.description
                  });
                  managementResults.labels.push(`‚úÖ Created: ${label.name}`);
                } catch (error) {
                  if (error.status === 422) {
                    managementResults.labels.push(`üìã Exists: ${label.name}`);
                  } else {
                    managementResults.labels.push(`‚ùå Error: ${label.name} - ${error.message}`);
                  }
                }
              }
              
              // Automatically apply relevant labels
              const autoLabels = ['claude-code', 'auto-generated'];
              if (triggerText.includes('security')) {
                autoLabels.push('security-fix');
              }
              if (triggerText.includes('performance')) {
                autoLabels.push('performance');
              }
              if (triggerText.includes('technical debt')) {
                autoLabels.push('technical-debt');
              }
              if (triggerText.includes('document')) {
                autoLabels.push('documentation');
              }
              if (triggerText.includes('ci') || triggerText.includes('cd') || triggerText.includes('deploy')) {
                autoLabels.push('ci-cd');
              }
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: autoLabels
              });
              
              managementResults.labels.push(`üè∑Ô∏è Applied: ${autoLabels.join(', ')}`);
              
              // 2. üéØ Automatic Milestone Management
              console.log('üéØ Running milestone management...');
              
              try {
                // Create a milestone for the current year and month
                const now = new Date();
                const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                const currentMilestone = `${now.getFullYear()}-${monthNames[now.getMonth()]}`;
                
                try {
                  const milestone = await github.rest.issues.createMilestone({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: currentMilestone,
                    description: `Tasks and improvements for ${currentMilestone}`,
                    due_on: new Date(now.getFullYear(), now.getMonth() + 1, 0).toISOString()
                  });
                  managementResults.milestones.push(`‚úÖ Created: ${currentMilestone}`);
                } catch (error) {
                  if (error.status === 422) {
                    managementResults.milestones.push(`üìÖ Exists: ${currentMilestone}`);
                  } else {
                    managementResults.milestones.push(`‚ùå Error: ${error.message}`);
                  }
                }
              } catch (error) {
                managementResults.milestones.push(`‚ùå Milestone management error: ${error.message}`);
              }
              
              // 3. üìä Project Board Management
              console.log('üìä Running project management...');
              
              try {
                // Get projects for the repository
                const projects = await github.rest.projects.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                
                if (projects.data.length > 0) {
                  const project = projects.data[0];
                  managementResults.projects.push(`üìä Project detected: ${project.name}`);
                  
                  // Add a card to the To Do column
                  const columns = await github.rest.projects.listColumns({
                    project_id: project.id
                  });
                  
                  const todoColumn = columns.data.find(col => 
                    col.name.toLowerCase().includes('todo') || 
                    col.name.toLowerCase().includes('backlog')
                  );
                  
                  if (todoColumn) {
                    await github.rest.projects.createCard({
                      column_id: todoColumn.id,
                      content_id: context.payload.issue.id, // Use issue ID for content_id
                      content_type: 'Issue'
                    });
                    managementResults.projects.push(`üìã Card added: ${project.name}`);
                  }
                } else {
                  managementResults.projects.push(`‚ÑπÔ∏è Project board not found`);
                }
              } catch (error) {
                managementResults.projects.push(`‚ùå Project management error: ${error.message}`);
              }
              
              // 4. üîí Security Alert Handling
              console.log('üîí Running security check...');
              
              try {
                if (triggerText.includes('security') || triggerText.includes('vulnerability')) {
                  // Check for security alerts
                  try {
                    const vulnerabilities = await github.rest.secretScanning.listAlertsForRepo({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      state: 'open'
                    });
                    
                    managementResults.security.push(`üîç Open security alerts: ${vulnerabilities.data.length}`);
                    
                    if (vulnerabilities.data.length > 0) {
                      managementResults.security.push(`‚ö†Ô∏è Security alert confirmation required`);
                    }
                  } catch (error) {
                    managementResults.security.push(`‚ÑπÔ∏è Security alert check: Access restricted or feature disabled`);
                  }
                } else {
                  managementResults.security.push(`‚ÑπÔ∏è Security check: Skipped`);
                }
              } catch (error) {
                managementResults.security.push(`‚ùå Security check error: ${error.message}`);
              }
              
              // 5. üìö Automatic Wiki Update
              console.log('üìö Running Wiki management...');
              
              try {
                if (triggerText.includes('wiki') || triggerText.includes('document')) {
                  // Check if Wiki page exists
                  try {
                    const repoInfo = await github.rest.repos.get({
                      owner: context.repo.owner,
                      repo: context.repo.repo
                    });
                    
                    if (repoInfo.data.has_wiki) {
                      managementResults.wiki.push(`üìö Wiki enabled: Updatable`);
                      // Actual Wiki update is performed by Claude Code
                    } else {
                      managementResults.wiki.push(`üìö Wiki disabled: Needs to be enabled in settings`);
                    }
                  } catch (error) {
                    managementResults.wiki.push(`‚ùå Wiki check error: ${error.message}`);
                  }
                } else {
                  managementResults.wiki.push(`‚ÑπÔ∏è Wiki update: Skipped`);
                }
              } catch (error) {
                managementResults.wiki.push(`‚ùå Wiki management error: ${error.message}`);
              }
              
              // 6. üåê GitHub Pages Management
              console.log('üåê Running GitHub Pages management...');
              
              try {
                if (triggerText.includes('pages') || triggerText.includes('deploy') || triggerText.includes('site')) {
                  try {
                    const pages = await github.rest.repos.getPages({
                      owner: context.repo.owner,
                      repo: context.repo.repo
                    });
                    
                    managementResults.pages.push(`üåê Pages enabled: ${pages.data.html_url}`);
                    
                    // Trigger a Pages build
                    await github.rest.repos.requestPagesBuild({
                      owner: context.repo.owner,
                      repo: context.repo.repo
                    });
                    
                    managementResults.pages.push(`üîÑ Triggered Pages rebuild`);
                  } catch (error) {
                    if (error.status === 404) {
                      managementResults.pages.push(`üåê Pages disabled: Needs to be enabled in settings`);
                    } else {
                      managementResults.pages.push(`‚ùå Pages management error: ${error.message}`);
                    }
                  }
                } else {
                  managementResults.pages.push(`‚ÑπÔ∏è Pages management: Skipped`);
                }
              } catch (error) {
                managementResults.pages.push(`‚ùå Pages management error: ${error.message}`);
              }
              
              // 7. ‚öôÔ∏è Actions Workflow Management
              console.log('‚öôÔ∏è Running Actions management...');
              
              try {
                if (triggerText.includes('workflow') || triggerText.includes('action') || triggerText.includes('ci') || triggerText.includes('cd')) {
                  const workflows = await github.rest.actions.listRepoWorkflows({
                    owner: context.repo.owner,
                    repo: context.repo.repo
                  });
                  
                  managementResults.actions.push(`‚öôÔ∏è Number of workflows: ${workflows.data.total_count}`);
                  
                  // Check for disabled workflows
                  const disabledWorkflows = workflows.data.workflows.filter(w => w.state === 'disabled_manually');
                  if (disabledWorkflows.length > 0) {
                    managementResults.actions.push(`‚ö†Ô∏è Disabled workflows: ${disabledWorkflows.length}`);
                  }
                } else {
                  managementResults.actions.push(`‚ÑπÔ∏è Actions management: Skipped`);
                }
              } catch (error) {
                managementResults.actions.push(`‚ùå Actions management error: ${error.message}`);
              }
              
              console.log('‚úÖ Advanced repository management complete');
              
              // Save results to output
              core.setOutput('management-results', JSON.stringify(managementResults));
              core.setOutput('management-success', 'true');
              
            } catch (error) {
              console.error('‚ùå Advanced repository management error:', error);
              core.setOutput('management-error', error.message);
              core.setOutput('management-success', 'false');
            }

      - name: Check for Changes and Prepare for PR
        id: check-changes
        if: steps.claude.outcome == 'success' && needs.setup.outputs.is-pr == 'false' && steps.claude.outputs.claude_branch_name
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          BRANCH_NAME="${{ steps.claude.outputs.claude_branch_name }}"
          DEFAULT_BRANCH="origin/${{ github.event.repository.default_branch }}"

          echo "--- 1. Checking if remote branch '${BRANCH_NAME}' exists ---"
          # Use `git ls-remote` to check for the branch's existence. It exits with 0 if it exists, 2 if not.
          if ! git ls-remote --exit-code --heads origin "${BRANCH_NAME}" >/dev/null 2>&1; then
            echo "‚úÖ Remote branch '${BRANCH_NAME}' not found. This indicates no code changes were committed."
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "branch-exists=false" >> $GITHUB_OUTPUT
            # Exit successfully as this is an expected outcome.
            exit 0
          fi
          
          echo "‚úÖ Remote branch found. Proceeding with original fetch and reset logic."
          echo "branch-exists=true" >> $GITHUB_OUTPUT

          echo "--- 2. DEBUG: Initial Git State ---"
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Current commit: $(git log -1 --pretty=%h)"
          echo "Workspace status:"
          git status -s
          echo "-----------------------------------"

          echo "üöÄ 3. Fetching the specific branch pushed by Claude: '${BRANCH_NAME}'..."
          git fetch origin "+refs/heads/${BRANCH_NAME}:refs/remotes/origin/${BRANCH_NAME}"

          echo "--- 4. DEBUG: After Fetch ---"
          echo "Remote commit for '${BRANCH_NAME}' is: $(git log origin/${BRANCH_NAME} -1 --pretty=%h)"
          echo "-----------------------------"
          
          echo "üîÑ 5. Forcibly resetting local branch to match the fetched remote state..."
          git checkout "${BRANCH_NAME}"
          git reset --hard "origin/${BRANCH_NAME}"

          echo "--- 6. DEBUG: After Resetting Local Branch ---"
          echo "Current branch is now: $(git rev-parse --abbrev-ref HEAD)"
          echo "Current commit is now: $(git log -1 --pretty=%h)"
          echo "Workspace status is now:"
          git status -s
          echo "---------------------------------------------"

          BRANCH_RANGE="${DEFAULT_BRANCH}...${BRANCH_NAME}"
          
          echo "üîç 7. Checking for changes in range: ${BRANCH_RANGE}..."
          
          # Use the exit code of 'git diff --quiet' to check for changes.
          if git diff --quiet $BRANCH_RANGE; then
            echo "‚úÖ No changes detected between branches. Setting has-changes=false."
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "üìù Changes detected. Setting has-changes=true."
            echo "has-changes=true" >> $GITHUB_OUTPUT
            
            echo "---"
            echo "üìÑ Changed files (compared to default branch):"
            git diff --name-only $BRANCH_RANGE
            
            echo "---"
            echo "üìä Change statistics:"
            git diff --stat $BRANCH_RANGE
          fi
    #########################################################
    # IF we have changes, create or update a pull request
    #########################################################
      - name: Create or Update Pull Request
        id: auto-pr
        # The 'if' condition is now correctly chained.
        if: |
          steps.claude.outcome == 'success' 
          && needs.setup.outputs.is-pr == 'false'
          && steps.claude.outputs.claude_branch_name 
          && steps.check-changes.outputs.has-changes == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = ${{ needs.setup.outputs.issue-number }}
            const branchName = '${{ steps.claude.outputs.claude_branch_name }}'
            const defaultBranch = '${{ github.event.repository.default_branch }}'
            const owner = context.repo.owner
            const repo = context.repo.repo

            try {
              // 1. Check for an existing PR for this branch
              console.log(`Checking for existing PRs for branch: ${branchName}`)
              
              let existingPr = null
              try {
                const { data: pulls } = await github.rest.pulls.list({
                  owner,
                  repo,
                  head: `${owner}:${branchName}`,
                  state: 'open',
                  per_page: 1
                })
                existingPr = pulls.length > 0 ? pulls[0] : null
              } catch (error) {
                existingPr = null
              }

              let pr

              if (existingPr) {
                // 2. If PR exists, use it
                pr = existingPr
                console.log(`‚úÖ Found existing PR: #${pr.number}. No new PR will be created.`)
                
                // Optional: Post a comment to the existing PR to notify of the update
                const updateComment = `üîÑ **Claude Code has updated this branch** with new changes.\n\n[View the latest workflow run](https://github.com/${owner}/${repo}/actions/runs/${{ github.run_id }})`
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: pr.number,
                  body: updateComment,
                })

              } else {
                // 3. If no PR exists, create one
                console.log(`No existing PR found. Attempting to create a new PR for branch: ${branchName}`)
                
                const { data: issue } = await github.rest.issues.get({
                  owner,
                  repo,
                  issue_number: issueNumber
                })
                
                const prTitle = `ü§ñ Claude Code: ${issue.title}`
                const prBody = `## ü§ñ Automated fix by Claude Code

            **Related Issue:** #${issueNumber}
            **Executed by:** @${{ github.actor }}

            ### ‚úÖ Next Steps
            1.  Review the changes in this PR.
            2.  Confirm that all tests pass.
            3.  Merge if everything looks good.

            **If additional fixes are needed:** Mention \`@ claude\` in a comment on this PR.

            *resolves #${issueNumber}*

            ---
            *Automated PR by [Claude Code Workflow](https://github.com/${owner}/${repo}/actions/runs/${{ github.run_id }})*
            `

                const { data: newPr } = await github.rest.pulls.create({
                  owner,
                  repo,
                  title: prTitle,
                  head: branchName,
                  base: defaultBranch,
                  body: prBody,
                  draft: false
                })

                pr = newPr
                console.log(`üéâ PR created successfully: #${pr.number}`)
              }
              
              // 4. Set outputs with the PR info (whether new or existing)
              core.setOutput('pr-number', pr.number)
              core.setOutput('pr-url', pr.html_url)
              core.setOutput('branch-name', branchName)

            } catch (error) {
              console.error('‚ùå PR creation/update error:', error)
              core.setOutput('error', error.message)
              
              const failureComment = `‚ùå **Automatic PR creation failed**\n\n**Error:** \`${error.message}\`\n\n**Solution**: A branch named \`${branchName}\` was created with the changes. Please create a PR from it manually or rerun the job.\n**Details**: [Actions run log](${{ github.server_url }}/${owner}/${repo}/actions/runs/${{ github.run_id }})`
              await github.rest.issues.createComment({
                issue_number: issueNumber,
                owner,
                repo,
                body: failureComment
              })
            }

      - name: Notify on Success
        if: steps.claude.outcome == 'success' && needs.setup.outputs.issue-number
        id: generate_success_comment
        uses: actions/github-script@v7
        with:
          script: |
            const isPR = '${{ needs.setup.outputs.is-pr }}' === 'true';
            const contextType = isPR ? 'Pull Request' : 'Issue';
            const eventName = '${{ github.event_name }}';
            const framework = '${{ steps.project-info.outputs.framework }}' || 'Unknown';
            const totalFiles = '${{ steps.project-info.outputs.total-files }}' || '0';
            const hasChanges = '${{ steps.check-changes.outputs.has-changes }}' === 'true';
            const autoPrNumber = '${{ steps.auto-pr.outputs.pr-number }}';
            const autoPrUrl = '${{ steps.auto-pr.outputs.pr-url }}';
            const branchName = '${{ steps.auto-pr.outputs.branch-name }}';
            const managementSuccess = '${{ steps.advanced-management.outputs.management-success }}' === 'true';
            const managementResults = '${{ steps.advanced-management.outputs.management-results }}';
            
            const eventIcons = {
              'pull_request_target': 'üîÄ',
              'issue_comment': 'üí¨',
              'issues': 'üìã',
              'pull_request_review_comment': 'üìù',
              'pull_request_review': 'üëÄ'
            };
            const icon = eventIcons[eventName] || 'ü§ñ';
            const hashSymbol = '#';
            
            let message = `${icon} **Claude Code execution complete**\n\n`;
            
            // Result of automatic PR creation
            if (!isPR && hasChanges && autoPrNumber) {
              message += `üéâ **Automatic PR created successfully!**\n`;
              message += `- PR: [${hashSymbol}${autoPrNumber}](${autoPrUrl})\n`;
              message += `- Branch: \`${branchName}\`\n`;
              message += `- Next step: Review PR ‚Üí Merge\n\n`;
            } else if (!isPR && !hasChanges) {
              message += `‚ÑπÔ∏è **Analysis only** (no code changes)\n\n`;
            }
            
            // Execution info (compact version)
            message += `**üìä Execution Info:** ${contextType} ${hashSymbol}${${{ needs.setup.outputs.issue-number }}} | ${framework} (${totalFiles} files) | @${{ github.actor }}\n`;
            if (isPR) {
              message += `**üåø Branch:** \`${{ needs.setup.outputs.head-ref }}\` ‚Üí \`${{ needs.setup.outputs.base-ref }}\`\n`;
            }
            
            // Repository management results (summary)
            if (managementSuccess && managementResults) {
              try {
                const results = JSON.parse(managementResults);
                const sections = ['labels', 'milestones', 'projects', 'security', 'wiki', 'pages', 'actions'];
                const hasResults = sections.some(s => results[s] && results[s].length > 0);
                
                if (hasResults) {
                  message += `\n**üöÄ Automated management executed:**\n`;
                  sections.forEach(section => {
                    if (results[section] && results[section].length > 0) {
                      const summary = results[section].filter(r => r.includes('‚úÖ') || r.includes('‚ö†Ô∏è')).slice(0, 2);
                      if (summary.length > 0) {
                        message += `${summary.map(r => `- ${r}`).join('\n')}\n`;
                      }
                    }
                  });
                }
              } catch (error) {
                // Do not display in case of error
              }
            }
            
            message += `\n---\n`;
            message += `üí° **Example commands for Claude:**\n\n`;
            
            // Main commands by category (concise version)
            const commands = {
              'üîç Analysis & Review': [
                'Please review the code',
                'Please perform a security check',
                'Please suggest performance improvements'
              ],
              'üõ†Ô∏è Tasks & Implementation': [
                'Please add test cases',
                'Please fix this issue and create a PR',
                'Please suggest refactoring'
              ],
              'üìö Management & Operations': [
                'Please create a release',
                'Please check security alerts',
                'Please optimize the workflow'
              ]
            };
            
            if (isPR) {
              commands['üîÄ PR Specific'] = [
                'Please perform a final check before merging',
                'Please check for breaking changes'
              ];
            } else {
              commands['üìã Issue Specific'] = [
                'Please investigate the root cause of this issue',
                'Please propose multiple solutions'
              ];
            }
            
            Object.entries(commands).forEach(([category, cmds]) => {
              message += `**${category}:**\n`;
              cmds.forEach(cmd => message += `- \`claude ${cmd}\`\n`);
              message += `\n`;
            });
            
            message += `üîÑ **Rerun**: You can run again anytime with \`claude [your instructions]\``;
            
            /* disabled
            await github.rest.issues.createComment({
              issue_number: ${{ needs.setup.outputs.issue-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
            */
            message += `<!-- claude-run-status -->`;

            // Set as output steps.generate_success_comment.outputs.result
            // return message;
            core.setOutput('comment-body', message)

      - name: Notify on Failure
        if: steps.claude.outcome == 'failure' && needs.setup.outputs.issue-number
        id: generate_error_comment
        uses: actions/github-script@v7
        with:
          script: |
            const isPR = '${{ needs.setup.outputs.is-pr }}' === 'true';
            const contextType = isPR ? 'Pull Request' : 'Issue';
            const managementError = '${{ steps.advanced-management.outputs.management-error }}';
            const hashSymbol = '#';
            
            let message = `‚ùå **Claude Code execution failed**\n\n`;
            message += `An error occurred while processing ${contextType} ${hashSymbol}${{ needs.setup.outputs.issue-number }}.\n\n`;
            
            // Error info (compact version)
            message += `**üìä Error Info:** ${contextType} | \`${{ github.event_name }}\` | @${{ github.actor }}\n`;
            message += `**üîó Detailed Log:** [Actions run log](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;
            
            if (managementError) {
              message += `‚ö†Ô∏è **Repository Management Error:** \`${managementError}\`\n\n`;
            }
            
            // Main causes and solutions (concise list)
            message += `**ü§î Possible Causes and Solutions:**\n\n`;
            
            message += `**1. Temporary Issue** (most common)\n`;
            message += `- Temporary limitations of the Claude API\n`;
            message += `- ‚Üí **Solution**: Rerun with \`claude\` after 5 minutes\n\n`;
            
            message += `**2. Timeout** (15-minute limit)\n`;
            message += `- The task may be too complex\n`;
            message += `- ‚Üí **Solution**: Break down the task with more specific instructions\n\n`;
            
            message += `**3. Configuration Issue**\n`;
            message += `- Expired or misconfigured tokens\n`;
            message += `- ‚Üí **Solution**: Check in Settings ‚Üí Secrets ‚Üí Actions\n`;
            message += `  - \`CLAUDE_ACCESS_TOKEN\`\n`;
            message += `  - \`CLAUDE_REFRESH_TOKEN\`\n`;
            message += `  - \`CLAUDE_EXPIRES_AT\`\n\n`;
            
            // Concise rerun guide
            message += `**üí° Rerun Tips:**\n`;
            message += `- Be specific: \`claude review src/components/Button.tsx\`\n`;
            message += `- Step by step: Start with one file\n`;
            message += `- Be clear: State the expected outcome\n\n`;
            
            message += `---\n`;
            message += `üîÑ **Rerun**: Please try again with \`claude [specific instructions]\`\n`;
            message += `üìû **Support**: If the problem persists, please contact an administrator`;
            
            /*
            await github.rest.issues.createComment({
              issue_number: ${{ needs.setup.outputs.issue-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
            */

            message += `<!-- claude-run-status -->`;

            // Set as output steps.generate_error_comment.outputs.result
            // return message;
            core.setOutput('comment-body', message)

      # Update the sticky comment with the success or error message
      - name: Post or Update Sticky Comment
        if: |
          always() 
          && (steps.generate_success_comment.outputs.comment-body || steps.generate_error_comment.outputs.comment-body)
          && needs.setup.outputs.status-comment-id
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ needs.setup.outputs.issue-number }}
          # Pass the ID found in the previous step to ensure we UPDATE
          comment-id: ${{ needs.setup.outputs.status-comment-id }}
          # The body comes from your script
          body: |
            ${{ steps.generate_success_comment.outputs.comment-body || steps.generate_error_comment.outputs.comment-body }}
          # Use 'replace' to overwrite the old "in-progress" message
          edit-mode: replace

      - name: Output Execution Log
        if: always()
        run: |
          echo "üìä ===== Execution Summary ====="
          echo "Status: ${{ steps.claude.outcome }}"
          echo "Context Type: ${{ needs.setup.outputs.is-pr == 'true' && 'PR' || 'Issue' }}"
          echo "Issue/PR: '#${{ needs.setup.outputs.issue-number }}'"
          echo "Branch: ${{ needs.setup.outputs.head-ref || 'default' }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          echo "Project: ${{ steps.project-info.outputs.framework || 'Unknown' }}"
          echo "Files: ${{ steps.project-info.outputs.total-files || '0' }}"
          echo "Duration: ${{ steps.claude.outputs.duration || 'N/A' }}"
          echo ""
          echo "üîß === Auto PR Creation Result ==="
          echo "Has Changes: ${{ steps.check-changes.outputs.has-changes || 'N/A' }}"
          echo "Auto PR Number: ${{ steps.auto-pr.outputs.pr-number || 'N/A' }}"
          echo "Auto PR URL: ${{ steps.auto-pr.outputs.pr-url || 'N/A' }}"
          echo "Branch Name: ${{ steps.auto-pr.outputs.branch-name || 'N/A' }}"
          echo "Auto PR Error: ${{ steps.auto-pr.outputs.error || 'None' }}"
          echo ""
          echo "üöÄ === Advanced Repository Management Result ==="
          echo "Management Success: ${{ steps.advanced-management.outputs.management-success || 'N/A' }}"
          echo "Management Error: ${{ steps.advanced-management.outputs.management-error || 'None' }}"
          echo "Management Results Available: ${{ steps.advanced-management.outputs.management-results && 'Yes' || 'No' }}"
          echo ""
          echo "Timestamp: $(date -u)"
          echo "=============================="